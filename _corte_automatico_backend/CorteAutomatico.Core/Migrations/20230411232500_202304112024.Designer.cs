// <auto-generated />
using System;
using CorteAutomatico.Core.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CorteAutomatico.Core.Migrations
{
    [DbContext(typeof(CorteAutomaticoContext))]
    [Migration("20230411232500_202304112024")]
    partial class _202304112024
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateOnly?>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("EnderecoCep")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_cep");

                    b.Property<string>("EnderecoCidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_cidade");

                    b.Property<string>("EnderecoComplemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_complemento");

                    b.Property<string>("EnderecoLogradouro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_logradouro");

                    b.Property<string>("EnderecoNumero")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_numero");

                    b.Property<string>("EnderecoReferencia")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_referencia");

                    b.Property<string>("EnderecoUfEstado")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_uf_estado");

                    b.Property<int>("FinanciadoraId")
                        .HasColumnType("integer")
                        .HasColumnName("financiadora_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("NomeFantasia")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome_fantasia");

                    b.Property<string>("NomeMae")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome_mae");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero_documento");

                    b.Property<string>("Obs")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("obs");

                    b.Property<string>("RazaoSocial")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("razao_social");

                    b.Property<string>("Telefone1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("telefone_1");

                    b.Property<string>("Telefone2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("telefone_2");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_documento_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_cliente_id");

                    b.HasIndex("FinanciadoraId");

                    b.HasIndex("TipoDocumentoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_cliente_uuid")
                        .IsUnique();

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.ClienteInstalacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<int>("InstalacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("instalacao_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_cliente_instalacao_id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("InstalacaoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_cliente_instalacao_uuid")
                        .IsUnique();

                    b.ToTable("cliente_instalacao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.ColaboradorFinanciadora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<string>("EmailCorporativo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_corporativo");

                    b.Property<int>("FinanciadoraId")
                        .HasColumnType("integer")
                        .HasColumnName("financiadora_id");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("matricula");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("telefone");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_colaborador_financiadora_id");

                    b.HasIndex("FinanciadoraId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex(new[] { "Uuid" }, "uk_colaborador_financiadora_uuid")
                        .IsUnique();

                    b.ToTable("colaborador_financiadora");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.ColaboradorIntegrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<string>("EmailCorporativo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_corporativo");

                    b.Property<int>("IntegradorId")
                        .HasColumnType("integer")
                        .HasColumnName("integrador_id");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("matricula");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("telefone");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_colaborador_integrador_id");

                    b.HasIndex("IntegradorId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex(new[] { "Uuid" }, "uk_colaborador_integrador_uuid")
                        .IsUnique();

                    b.ToTable("colaborador_integrador");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Comando", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<string>("CodigoErro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("codigo_erro");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateOnly?>("DataAgendamentoEnvio")
                        .HasColumnType("date")
                        .HasColumnName("data_agendamento_envio");

                    b.Property<int>("DispositivoId")
                        .HasColumnType("integer")
                        .HasColumnName("dispositivo_id");

                    b.Property<TimeOnly?>("HoraAgendamentoEnvio")
                        .HasColumnType("time without time zone")
                        .HasColumnName("hora_agendamento_envio");

                    b.Property<string>("IdMensagem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("id_mensagem");

                    b.Property<string>("IdResposta")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("id_resposta");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Msg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("msg");

                    b.Property<string>("NumeroDestinatario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero_destinatario");

                    b.Property<string>("NumeroResposta")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero_resposta");

                    b.Property<string>("Operadora")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("operadora");

                    b.Property<int?>("QtdCreditosConsumidos")
                        .HasColumnType("integer")
                        .HasColumnName("qtd_creditos_consumidos");

                    b.Property<string>("SituacaoEnvio")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("situacao_envio");

                    b.Property<string>("SituacaoMensagem")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("situacao_mensagem");

                    b.Property<string>("TextoResposta")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("texto_resposta");

                    b.Property<int>("TipoComandoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_comando_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_comando_id");

                    b.HasIndex("DispositivoId");

                    b.HasIndex("TipoComandoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_comando_uuid")
                        .IsUnique();

                    b.ToTable("comando");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Dispositivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<int>("DispositivoModeloId")
                        .HasColumnType("integer")
                        .HasColumnName("dispositivo_modelo_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("NumeroSms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("numero_sms");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("serial");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<bool>("Validado")
                        .HasColumnType("boolean")
                        .HasColumnName("validado");

                    b.HasKey("Id")
                        .HasName("pk_dispositivo_id");

                    b.HasIndex("DispositivoModeloId");

                    b.HasIndex(new[] { "Uuid" }, "uk_dispositivo_uuid")
                        .IsUnique();

                    b.ToTable("dispositivo");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.DispositivoInstalacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<int>("DispositivoId")
                        .HasColumnType("integer")
                        .HasColumnName("dispositivo_id");

                    b.Property<int>("InstalacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("instalacao_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_dispositivo_instalacao_id");

                    b.HasIndex("DispositivoId");

                    b.HasIndex("InstalacaoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_dispositivo_instalacao_uuid")
                        .IsUnique();

                    b.ToTable("dispositivo_instalacao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.DispositivoMarca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("TipoDispositivoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_dispositivo_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_dispositivo_marca_id");

                    b.HasIndex("TipoDispositivoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_dispositivo_marca_uuid")
                        .IsUnique();

                    b.ToTable("dispositivo_marca");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.DispositivoModelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<bool>("Compativel")
                        .HasColumnType("boolean")
                        .HasColumnName("compativel");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<int>("DispositivoMarcaId")
                        .HasColumnType("integer")
                        .HasColumnName("dispositivo_marca_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("QuantidadeFases")
                        .HasColumnType("integer")
                        .HasColumnName("quantidade_fases");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_dispositivo_modelo_id");

                    b.HasIndex("DispositivoMarcaId");

                    b.HasIndex(new[] { "Uuid" }, "uk_dispositivo_modelo_uuid")
                        .IsUnique();

                    b.ToTable("dispositivo_modelo");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Financiadora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cnpj");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome_fantasia");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("razao_social");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_financiadora_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_financiadora_uuid")
                        .IsUnique();

                    b.ToTable("financiadora");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.FinanciadoraPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<int>("FinanciadoraId")
                        .HasColumnType("integer")
                        .HasColumnName("financiadora_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_financiadora_perfil_id");

                    b.HasIndex("FinanciadoraId");

                    b.HasIndex("PerfilId");

                    b.HasIndex(new[] { "Uuid" }, "uk_financiadora_perfil_uuid")
                        .IsUnique();

                    b.ToTable("financiadora_perfil");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Financiamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateOnly>("DataEncerramento")
                        .HasColumnType("date")
                        .HasColumnName("data_encerramento");

                    b.Property<int>("FinanciadoraId")
                        .HasColumnType("integer")
                        .HasColumnName("financiadora_id");

                    b.Property<int>("InstalacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("instalacao_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Moeda")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("moeda");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)")
                        .HasColumnName("valor_total");

                    b.HasKey("Id")
                        .HasName("pk_financiamento_id");

                    b.HasIndex("FinanciadoraId");

                    b.HasIndex("InstalacaoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_financiamento_uuid")
                        .IsUnique();

                    b.ToTable("financiamento");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Instalacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<string>("EnderecoCep")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_cep");

                    b.Property<string>("EnderecoCidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_cidade");

                    b.Property<string>("EnderecoComplemento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_complemento");

                    b.Property<string>("EnderecoLogradouro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_logradouro");

                    b.Property<string>("EnderecoNumero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_numero");

                    b.Property<string>("EnderecoReferencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_referencia");

                    b.Property<string>("EnderecoUfEstado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_uf_estado");

                    b.Property<int>("InstalacaoStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("instalacao_status_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Obs")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("obs");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_instalacao_id");

                    b.HasIndex("InstalacaoStatusId");

                    b.HasIndex(new[] { "Uuid" }, "uk_instalacao_uuid")
                        .IsUnique();

                    b.ToTable("instalacao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.InstalacaoArquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<int>("InstalacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("instalacao_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("PathFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path_file");

                    b.Property<int>("TipoArquivoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_arquivo_id");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("titulo");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_instalacao_arquivo_id");

                    b.HasIndex("InstalacaoId");

                    b.HasIndex("TipoArquivoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_instalacao_arquivo_uuid")
                        .IsUnique();

                    b.ToTable("instalacao_arquivo");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.InstalacaoIntegrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<int>("InstalacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("instalacao_id");

                    b.Property<int>("IntegradorId")
                        .HasColumnType("integer")
                        .HasColumnName("integrador_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_instalacao_integrador_id");

                    b.HasIndex("InstalacaoId");

                    b.HasIndex("IntegradorId");

                    b.HasIndex(new[] { "Uuid" }, "uk_instalacao_integrador_uuid")
                        .IsUnique();

                    b.ToTable("instalacao_integrador");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.InstalacaoStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_instalacao_status_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_instalacao_status_uuid")
                        .IsUnique();

                    b.ToTable("instalacao_status");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Integrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cnpj");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome_fantasia");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("razao_social");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_integrador_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_integrador_uuid")
                        .IsUnique();

                    b.ToTable("integrador");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.IntegradorPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<int>("IntegradorId")
                        .HasColumnType("integer")
                        .HasColumnName("integrador_id");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_integrador_perfil_id");

                    b.HasIndex("IntegradorId");

                    b.HasIndex("PerfilId");

                    b.HasIndex(new[] { "Uuid" }, "uk_integrador_perfil_uuid")
                        .IsUnique();

                    b.ToTable("integrador_perfil");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.LogPerfilUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_log_perfil_usuario_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_log_perfil_usuario_uuid")
                        .IsUnique();

                    b.ToTable("log_perfil_usuario");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_perfil_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_perfil_uuid")
                        .IsUnique();

                    b.ToTable("perfil");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.PerfilPermissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_id");

                    b.Property<int>("PermissaoId")
                        .HasColumnType("integer")
                        .HasColumnName("permissao_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_perfil_permissao_id");

                    b.HasIndex("PerfilId");

                    b.HasIndex("PermissaoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_perfil_permissao_uuid")
                        .IsUnique();

                    b.ToTable("perfil_permissao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Permissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_permissao_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_permissao_uuid")
                        .IsUnique();

                    b.ToTable("permissao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.SolicitacaoIntervencao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateOnly>("DataAgendamentoIntervencao")
                        .HasColumnType("date")
                        .HasColumnName("data_agendamento_intervencao");

                    b.Property<int>("FinanciamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("financiamento_id");

                    b.Property<TimeOnly>("HoraAgendamentoIntervencao")
                        .HasColumnType("time without time zone")
                        .HasColumnName("hora_agendamento_intervencao");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("MotivoSolicitacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("motivo_solicitacao");

                    b.Property<int>("SolicitacaoIntervencaoStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("solicitacao_intervencao_status_id");

                    b.Property<int>("TipoSolicitacaoIntervencaoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_solicitacao_intervencao_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_solicitacao_intervencao_id");

                    b.HasIndex("FinanciamentoId");

                    b.HasIndex("SolicitacaoIntervencaoStatusId");

                    b.HasIndex("TipoSolicitacaoIntervencaoId");

                    b.HasIndex(new[] { "Uuid" }, "uk_solicitacao_intervencao_uuid")
                        .IsUnique();

                    b.ToTable("solicitacao_intervencao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.SolicitacaoIntervencaoLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("descricao");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Obs")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("obs");

                    b.Property<int>("SolicitacaoIntervencaoId")
                        .HasColumnType("integer")
                        .HasColumnName("solicitacao_intervencao_id");

                    b.Property<int?>("StatusAnterior")
                        .HasColumnType("integer")
                        .HasColumnName("status_anterior");

                    b.Property<int>("StatusCorrente")
                        .HasColumnType("integer")
                        .HasColumnName("status_corrente");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_solicitacao_intervencao_log_id");

                    b.HasIndex("SolicitacaoIntervencaoId");

                    b.HasIndex("StatusAnterior");

                    b.HasIndex("StatusCorrente");

                    b.HasIndex(new[] { "Uuid" }, "uk_solicitacao_intervencao_log_uuid")
                        .IsUnique();

                    b.ToTable("solicitacao_intervencao_log");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.SolicitacaoIntervencaoStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_solicitacao_intervencao_status_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_solicitacao_intervencao_status_uuid")
                        .IsUnique();

                    b.ToTable("solicitacao_intervencao_status");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.SolicitacaoResetSenha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiraEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expira_em");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("token");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_solicitacao_reset_senha_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_solicitacao_reset_senha_uuid")
                        .IsUnique();

                    b.ToTable("solicitacao_reset_senha");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoArquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_tipo_arquivo_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_tipo_arquivo_uuid")
                        .IsUnique();

                    b.ToTable("tipo_arquivo");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoComando", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_tipo_comando_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_tipo_comando_uuid")
                        .IsUnique();

                    b.ToTable("tipo_comando");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoDispositivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_tipo_dispositivo_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_tipo_dispositivo_uuid")
                        .IsUnique();

                    b.ToTable("tipo_dispositivo");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_tipo_documento_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_tipo_documento_uuid")
                        .IsUnique();

                    b.ToTable("tipo_documento");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoSolicitacaoIntervencao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_tipo_solicitacao_intervencao_id");

                    b.HasIndex(new[] { "Uuid" }, "uk_tipo_solicitacao_intervencao_uuid")
                        .IsUnique();

                    b.ToTable("tipo_solicitacao_intervencao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailConfirmacaoExpiraEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("email_confirmacao_expira_em");

                    b.Property<string>("EmailConfirmacaoToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_confirmacao_token");

                    b.Property<bool>("EmailConfirmado")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmado");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_usuario_id");

                    b.HasIndex("PerfilId");

                    b.HasIndex(new[] { "Uuid" }, "uk_usuario_uuid")
                        .IsUnique();

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.UsuarioSenha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criado_por");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_expiracao");

                    b.Property<DateTime>("ModificadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modificado_em");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("senha");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_usuario_senha_id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex(new[] { "Uuid" }, "uk_usuario_senha_uuid")
                        .IsUnique();

                    b.ToTable("usuario_senha");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Cliente", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Financiadora", "Financiadora")
                        .WithMany("Clientes")
                        .HasForeignKey("FinanciadoraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cliente_financiadora");

                    b.HasOne("CorteAutomatico.Core.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Clientes")
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cliente_tipo_documento");

                    b.Navigation("Financiadora");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.ClienteInstalacao", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Cliente", "Cliente")
                        .WithMany("ClienteInstalacaos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cliente_instalacao_cliente");

                    b.HasOne("CorteAutomatico.Core.Entities.Instalacao", "Instalacao")
                        .WithMany("ClienteInstalacaos")
                        .HasForeignKey("InstalacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cliente_instalacao_instalacao");

                    b.Navigation("Cliente");

                    b.Navigation("Instalacao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.ColaboradorFinanciadora", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Financiadora", "Financiadora")
                        .WithMany("ColaboradorFinanciadoras")
                        .HasForeignKey("FinanciadoraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_colaborador_financiadora_financiadora");

                    b.HasOne("CorteAutomatico.Core.Entities.Usuario", "Usuario")
                        .WithMany("ColaboradorFinanciadoras")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_colaborador_financiadora_usuario");

                    b.Navigation("Financiadora");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.ColaboradorIntegrador", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Integrador", "Integrador")
                        .WithMany("ColaboradorIntegradors")
                        .HasForeignKey("IntegradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_colaborador_integrador_integradorforeign");

                    b.HasOne("CorteAutomatico.Core.Entities.Usuario", "Usuario")
                        .WithMany("ColaboradorIntegradors")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_colaborador_integrador_usuario");

                    b.Navigation("Integrador");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Comando", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Dispositivo", "Dispositivo")
                        .WithMany("Comandos")
                        .HasForeignKey("DispositivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_comando_dispositivo");

                    b.HasOne("CorteAutomatico.Core.Entities.TipoComando", "TipoComando")
                        .WithMany("Comandos")
                        .HasForeignKey("TipoComandoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_comando_tipo_comando");

                    b.Navigation("Dispositivo");

                    b.Navigation("TipoComando");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Dispositivo", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.DispositivoModelo", "DispositivoModelo")
                        .WithMany("Dispositivos")
                        .HasForeignKey("DispositivoModeloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dispositivo_dispositivo_modelo");

                    b.Navigation("DispositivoModelo");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.DispositivoInstalacao", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Dispositivo", "Dispositivo")
                        .WithMany("DispositivoInstalacaos")
                        .HasForeignKey("DispositivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dispositivo_instalacao_dispositivo");

                    b.HasOne("CorteAutomatico.Core.Entities.Instalacao", "Instalacao")
                        .WithMany("DispositivoInstalacaos")
                        .HasForeignKey("InstalacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dispositivo_instalacao_instalacao");

                    b.Navigation("Dispositivo");

                    b.Navigation("Instalacao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.DispositivoMarca", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.TipoDispositivo", "TipoDispositivo")
                        .WithMany("DispositivoMarcas")
                        .HasForeignKey("TipoDispositivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dispositivo_marca_tipo_dispositivo");

                    b.Navigation("TipoDispositivo");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.DispositivoModelo", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.DispositivoMarca", "DispositivoMarca")
                        .WithMany("DispositivoModelos")
                        .HasForeignKey("DispositivoMarcaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dispositivo_modelo_dispositivo_marca");

                    b.Navigation("DispositivoMarca");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.FinanciadoraPerfil", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Financiadora", "Financiadora")
                        .WithMany("FinanciadoraPerfils")
                        .HasForeignKey("FinanciadoraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_financiadora_perfil_financiadora");

                    b.HasOne("CorteAutomatico.Core.Entities.Perfil", "Perfil")
                        .WithMany("FinanciadoraPerfils")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_financiadora_perfil_perfil");

                    b.Navigation("Financiadora");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Financiamento", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Financiadora", "Financiadora")
                        .WithMany("Financiamentos")
                        .HasForeignKey("FinanciadoraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_financiamento_financiadora");

                    b.HasOne("CorteAutomatico.Core.Entities.Instalacao", "Instalacao")
                        .WithMany("Financiamentos")
                        .HasForeignKey("InstalacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_financiamento_instalacao");

                    b.Navigation("Financiadora");

                    b.Navigation("Instalacao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Instalacao", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.InstalacaoStatus", "InstalacaoStatus")
                        .WithMany("Instalacaos")
                        .HasForeignKey("InstalacaoStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_instalacao_instalacao_status");

                    b.Navigation("InstalacaoStatus");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.InstalacaoArquivo", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Instalacao", "Instalacao")
                        .WithMany("InstalacaoArquivos")
                        .HasForeignKey("InstalacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_instalacao_arquivo_instalacao");

                    b.HasOne("CorteAutomatico.Core.Entities.TipoArquivo", "TipoArquivo")
                        .WithMany("InstalacaoArquivos")
                        .HasForeignKey("TipoArquivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_instalacao_arquivo_tipo_arquivo");

                    b.Navigation("Instalacao");

                    b.Navigation("TipoArquivo");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.InstalacaoIntegrador", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Instalacao", "Instalacao")
                        .WithMany("InstalacaoIntegradors")
                        .HasForeignKey("InstalacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_instalacao_integrador_instalacao");

                    b.HasOne("CorteAutomatico.Core.Entities.Integrador", "Integrador")
                        .WithMany("InstalacaoIntegradors")
                        .HasForeignKey("IntegradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_instalacao_integrador_integrador");

                    b.Navigation("Instalacao");

                    b.Navigation("Integrador");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.IntegradorPerfil", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Integrador", "Integrador")
                        .WithMany("IntegradorPerfils")
                        .HasForeignKey("IntegradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_integrador_perfil_integrador");

                    b.HasOne("CorteAutomatico.Core.Entities.Perfil", "Perfil")
                        .WithMany("IntegradorPerfils")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_integrador_perfil_perfil");

                    b.Navigation("Integrador");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.PerfilPermissao", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Perfil", "Perfil")
                        .WithMany("PerfilPermissaos")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_perfil_permissao_perfil");

                    b.HasOne("CorteAutomatico.Core.Entities.Permissao", "Permissao")
                        .WithMany("PerfilPermissaos")
                        .HasForeignKey("PermissaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_perfil_permissao_permissao");

                    b.Navigation("Perfil");

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.SolicitacaoIntervencao", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Financiamento", "Financiamento")
                        .WithMany("SolicitacaoIntervencaos")
                        .HasForeignKey("FinanciamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_solicitacao_intervencao_financiamento");

                    b.HasOne("CorteAutomatico.Core.Entities.SolicitacaoIntervencaoStatus", "SolicitacaoIntervencaoStatus")
                        .WithMany("SolicitacaoIntervencaos")
                        .HasForeignKey("SolicitacaoIntervencaoStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_solicitacao_intervencao_solicitacao_intervencao_status");

                    b.HasOne("CorteAutomatico.Core.Entities.TipoSolicitacaoIntervencao", "TipoSolicitacaoIntervencao")
                        .WithMany("SolicitacaoIntervencaos")
                        .HasForeignKey("TipoSolicitacaoIntervencaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_solicitacao_intervencao_tipo_solicitacao_intervencao");

                    b.Navigation("Financiamento");

                    b.Navigation("SolicitacaoIntervencaoStatus");

                    b.Navigation("TipoSolicitacaoIntervencao");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.SolicitacaoIntervencaoLog", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.SolicitacaoIntervencao", "SolicitacaoIntervencao")
                        .WithMany("SolicitacaoIntervencaoLogs")
                        .HasForeignKey("SolicitacaoIntervencaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_solicitacao_intervencao_log_solicitacao_intervencao");

                    b.HasOne("CorteAutomatico.Core.Entities.SolicitacaoIntervencaoStatus", "StatusAnteriorNavigation")
                        .WithMany("SolicitacaoIntervencaoLogStatusAnteriorNavigations")
                        .HasForeignKey("StatusAnterior")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_solicitacao_intervencao_log_status_anterior");

                    b.HasOne("CorteAutomatico.Core.Entities.SolicitacaoIntervencaoStatus", "StatusCorrenteNavigation")
                        .WithMany("SolicitacaoIntervencaoLogStatusCorrenteNavigations")
                        .HasForeignKey("StatusCorrente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_solicitacao_intervencao_log_status_status_corrente");

                    b.Navigation("SolicitacaoIntervencao");

                    b.Navigation("StatusAnteriorNavigation");

                    b.Navigation("StatusCorrenteNavigation");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Usuario", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Perfil", "Perfil")
                        .WithMany("Usuarios")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_usuario_perfil");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.UsuarioSenha", b =>
                {
                    b.HasOne("CorteAutomatico.Core.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioSenhas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_usuario_senha_usuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Cliente", b =>
                {
                    b.Navigation("ClienteInstalacaos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Dispositivo", b =>
                {
                    b.Navigation("Comandos");

                    b.Navigation("DispositivoInstalacaos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.DispositivoMarca", b =>
                {
                    b.Navigation("DispositivoModelos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.DispositivoModelo", b =>
                {
                    b.Navigation("Dispositivos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Financiadora", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("ColaboradorFinanciadoras");

                    b.Navigation("FinanciadoraPerfils");

                    b.Navigation("Financiamentos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Financiamento", b =>
                {
                    b.Navigation("SolicitacaoIntervencaos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Instalacao", b =>
                {
                    b.Navigation("ClienteInstalacaos");

                    b.Navigation("DispositivoInstalacaos");

                    b.Navigation("Financiamentos");

                    b.Navigation("InstalacaoArquivos");

                    b.Navigation("InstalacaoIntegradors");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.InstalacaoStatus", b =>
                {
                    b.Navigation("Instalacaos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Integrador", b =>
                {
                    b.Navigation("ColaboradorIntegradors");

                    b.Navigation("InstalacaoIntegradors");

                    b.Navigation("IntegradorPerfils");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Perfil", b =>
                {
                    b.Navigation("FinanciadoraPerfils");

                    b.Navigation("IntegradorPerfils");

                    b.Navigation("PerfilPermissaos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Permissao", b =>
                {
                    b.Navigation("PerfilPermissaos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.SolicitacaoIntervencao", b =>
                {
                    b.Navigation("SolicitacaoIntervencaoLogs");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.SolicitacaoIntervencaoStatus", b =>
                {
                    b.Navigation("SolicitacaoIntervencaoLogStatusAnteriorNavigations");

                    b.Navigation("SolicitacaoIntervencaoLogStatusCorrenteNavigations");

                    b.Navigation("SolicitacaoIntervencaos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoArquivo", b =>
                {
                    b.Navigation("InstalacaoArquivos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoComando", b =>
                {
                    b.Navigation("Comandos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoDispositivo", b =>
                {
                    b.Navigation("DispositivoMarcas");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.TipoSolicitacaoIntervencao", b =>
                {
                    b.Navigation("SolicitacaoIntervencaos");
                });

            modelBuilder.Entity("CorteAutomatico.Core.Entities.Usuario", b =>
                {
                    b.Navigation("ColaboradorFinanciadoras");

                    b.Navigation("ColaboradorIntegradors");

                    b.Navigation("UsuarioSenhas");
                });
#pragma warning restore 612, 618
        }
    }
}
